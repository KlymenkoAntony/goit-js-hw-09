{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEeC,SAASC,cAAc,mBAAtC,MACMC,EAAUF,SAASC,cAAc,SAEjBC,EAAQD,cAAc,kBACvBC,EAAQD,cAAc,iBACpBC,EAAQD,cAAc,mBAE9BC,EAAQC,iBAAiB,SA0BxC,SAASC,GAAcC,SAAEA,EAAQC,MAAEA,IACjC,MAAMC,EAAgBC,KAAKC,SAAW,GAatC,OADgB,IAAIC,SAVH,CAACC,EAASC,KACzBC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,MAEpBA,MAjCPJ,EAAQY,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAIC,iBAEJ,MAAMC,EAAOF,EAAIG,OACXC,EAAaC,SAASH,EAAKX,MAAMe,OACjCC,EAAYF,SAASH,EAAKM,KAAKF,OAC/BG,EAAcJ,SAASH,EAAKQ,OAAOJ,OAEzC,IAAK,IAAIK,EAAW,EAAGA,EAAWF,EAAaE,GAAY,EAAG,CAG5DtB,EAAc,CAAEC,SAAAqB,EAAUpB,MAFZa,EAAaG,EAAYI,IAGpCC,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,GAAU,MAC3BR,EAAA8B,OAAOC,QAAQ,6BAA6BxB,EAAW,QAAQC,UAEhEwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,GAAU,MAC5BR,EAAA8B,OAAOG,QAAQ,4BAA4B1B,EAAW,QAAQC","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst btnRef = document.querySelector(\"[type='submit']\");\nconst formRef = document.querySelector('.form');\n\nconst delayInputRef = formRef.querySelector(\"[name='delay']\");\nconst stepInputRef = formRef.querySelector(\"[name='step']\");\nconst amountInputRef = formRef.querySelector(\"[name='amount']\");\n\nconst labels = formRef.querySelectorAll('label');\n\n\nformRef.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  const form = evt.target;\n  const delayValue = parseInt(form.delay.value);\n  const stepValue = parseInt(form.step.value);\n  const amountValue = parseInt(form.amount.value);\n\n  for (let position = 0; position < amountValue; position += 1) {\n    const delay = delayValue + stepValue * position;\n\n    createPromise({ position, delay })\n      .then(({ position, delay } = {}) => {\n        Notify.success(`&#x2705 Fulfilled promise ${position + 1} in ${delay}ms`);\n      })\n      .catch(({ position, delay } = {}) => {\n        Notify.failure(`&#10060 Rejected promise ${position + 1} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise({ position, delay }) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const executor = (resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  };\n\n  const promise = new Promise(executor);\n  return promise;\n}\n"],"names":["$iQIUW","parcelRequire","document","querySelector","$47d4ff9957288465$var$formRef","querySelectorAll","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","form","target","delayValue","parseInt","value","stepValue","step","amountValue","amount","position1","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.b1cee74f.js.map"}